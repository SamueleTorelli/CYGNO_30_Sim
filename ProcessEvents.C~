
void ProcessFile(std::string filename){

  TFile* f = TFile::Open(filename.c_str());
  
  TTree* tree = (TTree*)f->Get("Hits");

  Int_t Evn,ParticleID,ParticleTag,ParentID,VolumeNumber;
  Double_t x_hits,y_hits,z_hits,VolumeTraslX,VolumeTraslY,VolumeTraslZ,EnergyDeposit;

  Char_t Nucleus[10];

  Char_t ParticleName[10];

  tree->SetBranchAddress("EventNumber",&Evn);
  tree->SetBranchAddress("ParticleID",&ParticleID);
  tree->SetBranchAddress("ParticleTag",&ParticleTag);
  tree->SetBranchAddress("ParticleName",&ParticleName);
  tree->SetBranchAddress("ParentID",&ParentID);
  tree->SetBranchAddress("VolumeNumber",&VolumeNumber);
  tree->SetBranchAddress("x_hits",&x_hits);
  tree->SetBranchAddress("y_hits",&y_hits);
  tree->SetBranchAddress("z_hits",&z_hits);
  tree->SetBranchAddress("EnergyDeposit",&EnergyDeposit);
  tree->SetBranchAddress("VolumeNumber",&VolumeNumber);
  tree->SetBranchAddress("VolumeTraslX",&VolumeTraslX);
  tree->SetBranchAddress("VolumeTraslY",&VolumeTraslY);
  tree->SetBranchAddress("VolumeTraslZ",&VolumeTraslZ);
  tree->SetBranchAddress("Nucleus",&Nucleus);

  TFile* fout= new TFile("test.root","recreate");

  fout->cd();
  
  Int_t evNumber=0;
  std::string PartName;
  double_t TotalEdep=0;
  Int_t VolNum;
  
  TTree* outTree = new TTree("elabHits","elabHits");

  outTree->Branch("evNumber",&evNumber);
  outTree->Branch("PartName",&PartName);
  outTree->Branch("Edep",&TotalEdep);
  outTree->Branch("VolNum",&VolNum);
    
  tree->GetEntry(0);
  
  evNumber=Evn;
  PartName=ParticleName;
  VolNum=VolumeNumber;
  
  for(int i=0;i<4000;i++){
    tree->GetEntry(i);

    if(Evn == evNumber && PartName==ParticleName && VolNum==VolumeNumber){
      TotalEdep+=EnergyDeposit;
    } else {
      outTree->Fill();
      evNumber=Evn;
      PartName=ParticleName;
      VolNum=VolumeNumber;
      TotalEdep=0;
    }
    
  }//chiudo for

  outTree->Write();
  fout->Save();
  fout->Close();

}
